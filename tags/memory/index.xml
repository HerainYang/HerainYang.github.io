<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memory on Herain&#39;s Blog</title>
    <link>https://herainic.com/tags/memory/</link>
    <description>Recent content in Memory on Herain&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 May 2022 12:58:30 +1000</lastBuildDate><atom:link href="https://herainic.com/tags/memory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How classes are stored in memory</title>
      <link>https://herainic.com/posts/howclassesarestoredinmemory/</link>
      <pubDate>Mon, 09 May 2022 12:58:30 +1000</pubDate>
      
      <guid>https://herainic.com/posts/howclassesarestoredinmemory/</guid>
      <description>We only talk about member variables and member functions here, others such as static function or const stuffs will make this topic much more difficult to discuss, I&amp;rsquo;ll argue it in the future (maybe lol).
We know that during the runtime, the instance is stored in the stack or heap (precisely, most of the variables are in the stack), but before a class is instantiate, where is it and how does it go into stack.</description>
    </item>
    
  </channel>
</rss>
